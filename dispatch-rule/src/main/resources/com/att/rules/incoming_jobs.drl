package com.att.rules;

import java.util.ArrayList;
import com.att.dispatch.rule.model.Turf;
import com.att.dispatch.rule.model.Group;
import com.att.dispatch.rule.model.Job;
import com.att.dispatch.rule.model.Flag;
import com.att.dispatch.rule.model.Analytic;
import com.att.dispatch.rule.model.Message;
import com.att.dispatch.rule.process.RuleHelper;

global  com.att.dispatch.rule.process.JobPool job_pool
global  com.att.dispatch.rule.process.TurfPool turf_pool

rule "a pending job"
  no-loop true
when
    $job: Job( $id: id, $turfID : turfID, status =="PENDING" )
then
    String key = $turfID.toString();
    Turf turf = turf_pool.find(key);
    //set the turf name on the job
    $job.setTurfName(turf.getName());
    //insert new job into the turf rule to update the turf
    insert($job);
    insert(turf);
end


rule "a job is dispatched"
no-loop true
when
     $job: Job($turfID : turfID, status == "DISPATCHED")
then
   //find the turf in the datastore
   String key = $turfID.toString(); 
   Turf turf = turf_pool.find(key);
   //set the turf name on the job
   $job.setTurfName(turf.getName());
   update($job);
   insert(turf);
end


rule "a job is dispatched , start time is set and it is not complete"
    timer(expr: "10s", $duration ; start=$start)
when
    $dispatched_job: Job( $id: id, $turfID : turfID,
                                        status == "DISPATCHED", 
                                        $start : startTime != null, 
                                        $duration : duration !=null )
then
    /** find exist the existing job in  data store and compare with rule's working memory **/
    String key = $turfID.toString();
    String field = $id.toString();
    Job job = job_pool.find($dispatched_job);

    /**  time difference current time to start time in minutes **/
    int difference = RuleHelper.currentTimeDifferent($start);
    if( difference > $duration && ( job!= null && !job.getStatus().equals("COMPLETE")) )
     {     
            if( !job.getActive() ) {	
                int value = 1;
                Turf turf = turf_pool.find(key);
                if( turf.getGroups().containsKey("OVERDUE") )
                 {
                     int newValue = (turf.getGroups().get("OVERDUE")).getValue() + value;
                     (turf.getGroups().get("OVERDUE")).setValue(newValue);
                 }
              else{
                     turf.getGroups().put("OVERDUE", new Group("OVERDUE", value));
                }
        
            //insert into the turf rule to update the turf
             $dispatched_job.setFlag( new Flag("GREEN") );
             $dispatched_job.setActive(true);
             Message message = new Message();
             message.add("messages:jobs", job_pool.save($dispatched_job));
             message.add("messages:turfs", turf_pool.save(turf));
             insert(message);
             insert(new Analytic("TURF_GROUP_SERIES"));
          }
    }
    else{
          retract($dispatched_job);
    }

end

rule "a job is complete"
when
    $job: Job($turfID : turfID, status == "COMPLETE")
then
    String key = $turfID.toString();
    Turf turf = turf_pool.find(key);
     $job.setTurfName(turf.getName());
     insert(turf);
     insert($job);
end