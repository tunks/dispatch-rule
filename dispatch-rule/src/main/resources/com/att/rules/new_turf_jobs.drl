package com.att.rules;

import java.util.ArrayList;

import com.att.dispatch.rule.model.Turf;
import com.att.dispatch.rule.model.Job;
import com.att.dispatch.rule.model.Group;

global  com.att.dispatch.rule.process.JobPool job_pool
global  com.att.dispatch.rule.process.TurfPool turf_pool

declare Job
  @properChangeSupport
end

/*********  PENDING RULE - starts*******************/
rule "a pending job is added,create a turf status group"
when
    $job: Job($id: id, $turfID: turfID, $status: status == "PENDING")
    $turf: Turf(id == $turfID, $groups: groups)
    Boolean(booleanValue == false) from $groups.containsKey($status)
then 
    //add new group
    int value = 1;
    //update the total number of jobs by 1
    $turf.setTotalNumberOfJobs( $turf.getTotalNumberOfJobs() +value);
    //set the value
    $turf.getGroups().put($status,new Group($status,value));
 
   //update the data store  and send message to notifier
    Message msg = new Message();
    msg.add("messages:turfs:jobs", job_pool.save($job));
    msg.add("messages:turfs", turf_pool.save($turf));
    insert(msg);
    //remove from memory
    retract($turf);
    retract($job);
     //analytics
    insert(new Analytic("TURF_GROUP_SERIES"));
    insert(new Analytic("TURF_SERIES"));
end

rule "a pending job is added, update existing status group"
when
    $job: Job( $turfID: turfID , $status: status == "PENDING")
    $turf: Turf(id == $turfID, $groups: groups)
    Boolean(booleanValue == true) from $groups.containsKey($status)
then 
    //add new group
    int value = 1;
    //update the total number of jobs by 1
    $turf.setTotalNumberOfJobs( $turf.getTotalNumberOfJobs() +value);
    //set the group value
    Group group = (Group)$groups.get($status);
    int newValue = group.getValue() + value;
    group.setValue(newValue);
    $turf.getGroups().put($status, group);

    //update the data store  and send message to publish
    Message msg = new Message();
    msg.add("messages:turfs:jobs", job_pool.save($job));
    msg.add("messages:turfs", turf_pool.save($turf));
    insert(msg); 

    //remove from the rules working memory
    retract($turf);
    retract($job);

     //analytics
    insert(new Analytic("TURF_GROUP_SERIES"));
    insert(new Analytic("TURF_SERIES"));
end
/*******PENDING -ends *******/

/*********  DISPATCHED RULE - starts*******************/
rule "a dispatched job is added,create turf status group"
when
    $job: Job($id: id, $turfID: turfID, $status: status == "DISPATCHED")
    $turf: Turf(id == $turfID, $groups: groups)
    Boolean(booleanValue == false) from $groups.containsKey($status)
then 
    //add new group
    int value = 1;
    //update the total number of jobs by 1
    $turf.setTotalNumberOfJobs( $turf.getTotalNumberOfJobs() +value);
    //set the value
    $turf.getGroups().put($status,new Group($status,value));
 
   //update the data store  and send message to notifier
    Message msg = new Message();
    msg.add("messages:turfs:jobs", job_pool.save($job));
    msg.add("messages:turfs", turf_pool.save($turf));
    insert(msg);

     //analytics
    insert(new Analytic("TURF_GROUP_SERIES"));
    insert(new Analytic("TURF_SERIES"));
end

rule "a DISPATCHED job is added, update existing status group"
when
    $job: Job( $turfID: turfID , $status: status == "DISPATCHED")
    $turf: Turf(id == $turfID, $groups: groups)
    Boolean(booleanValue == true) from $groups.containsKey($status)
then 
    //add new group
    int value = 1;
    //update the total number of jobs by 1
    $turf.setTotalNumberOfJobs( $turf.getTotalNumberOfJobs() +value);
    //set the group value
    Group group = (Group)$groups.get($status);
    int newValue = group.getValue() + value;
    group.setValue(newValue);
    $turf.getGroups().put($status, group);

    //update the data store  and send message to publish
    Message msg = new Message();
    msg.add("messages:turfs:jobs", job_pool.save($job));
    msg.add("messages:turfs", turf_pool.save($turf));
    insert(msg); 

     //analytics
    insert(new Analytic("TURF_GROUP_SERIES"));
    insert(new Analytic("TURF_SERIES"));
end
/*******DISPATCHED -ends *******/

/********* COMPLETE RULE - starts*******************/
rule "a dispatched job is added,create a turf status group"
when
    $job: Job($id: id, $turfID: turfID, $status: status == "COMPLETE")
    $turf: Turf(id == $turfID, $groups: groups)
    Boolean(booleanValue == false) from $groups.containsKey($status)
then 
    //add new group
    int value = 1;
    //update the total number of jobs by 1
    $turf.setTotalNumberOfJobs( $turf.getTotalNumberOfJobs() +value);
    //set the value
    $turf.getGroups().put($status,new Group($status,value));
 
   //update the data store  and send message to notifier
    Message msg = new Message();
    msg.add("messages:turfs:jobs", job_pool.save($job));
    msg.add("messages:turfs", turf_pool.save($turf));
    insert(msg);
    //remove from memory
    retract($turf);
    retract($job);
     
     //analytics
    insert(new Analytic("TURF_GROUP_SERIES"));
    insert(new Analytic("TURF_SERIES"));
end

rule "a COMPLETE job is added, update existing status group"
when
    $job: Job( $turfID: turfID , $status: status == "COMPLETE")
    $turf: Turf(id == $turfID, $groups: groups)
    Boolean(booleanValue == true) from $groups.containsKey($status)
then 
    //add new group
    int value = 1;
    //update the total number of jobs by 1
    $turf.setTotalNumberOfJobs( $turf.getTotalNumberOfJobs() +value);
    //set the group value
    Group group = (Group)$groups.get($status);
    int newValue = group.getValue() + value;
    group.setValue(newValue);
    $turf.getGroups().put($status, group);

    //update the data store  and send message to publish
    Message msg = new Message();
    msg.add("messages:turfs:jobs", job_pool.save($job));
    msg.add("messages:turfs", turf_pool.save($turf));
    insert(msg); 

    //remove from the rules working memory
    retract($turf);
    retract($job);
 
 
     //analytics
    insert(new Analytic("TURF_GROUP_SERIES"));
    insert(new Analytic("TURF_SERIES"));
end
/*******COMPLETE -ends *******/